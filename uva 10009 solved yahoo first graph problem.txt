#include<cstdio>
#include<sstream>
#include<cstdlib>
#include<cctype>
#include<cmath>
#include<algorithm>
#include<set>
#include<queue>
#include<stack>
#include<list>
#include<iostream>
#include<fstream>
#include<numeric>
#include<string>
#include<vector>
#include<cstring>
#include<map>
#include<iterator>

using namespace std;


vector<char>G[31];

char parent_of_city[31];
int level_of_city[31];

void bfs()
{
	int visited[31]={0};
	queue<char>q;
	q.push('R');
	visited['R'-'A']=1;
	int level=0;
	level_of_city['R'-'A']=level;
	while (!q.empty())
	{
		char u=q.front();
		for(int j=0;j<G[u-'A'].size();j++)
		{
			char node=G[u-'A'][j];
			if(visited[node-'A']==0)
			{
				visited[node-'A']=1;
				q.push(node);
				parent_of_city[node-'A']=u;
				level_of_city[node-'A']=level_of_city[u-'A']+1;
			}
		}
		q.pop();
	}
}
void find_path(char node1,char node2)
{
	vector<char>ansleft;
	vector<char>ansright;
	while(node1!=node2)
	{
		if(level_of_city[node1-'A']>level_of_city[node2-'A'])
		{
			for(int i=level_of_city[node1-'A'];i>level_of_city[node2-'A'];i--)
			{
				ansleft.push_back(node1);
				node1=parent_of_city[node1-'A'];
			}
		}
		else if(level_of_city[node2-'A']>level_of_city[node1-'A'])
		{
			for(int i=level_of_city[node2-'A'];i>level_of_city[node1-'A'];i--)
			{
				ansright.push_back(node2);
				node2=parent_of_city[node2-'A'];
			}
		}
		else
		{
			ansleft.push_back(node1);
			ansright.push_back(node2);
			node1=parent_of_city[node1-'A'];
			node2=parent_of_city[node2-'A'];
		}
	}
	ansleft.push_back(node1);
	for(int i=0;i<ansleft.size();i++)printf("%c",ansleft[i]);
	for(int i=ansright.size()-1;i>=0;i--)printf("%c",ansright[i]);
	printf("\n");
}
void clearG()
{
	for(int i=0;i<26;i++)
	{
		G[i].clear();
	}
}
int main()
{
	//freopen("in.txt","r",stdin);
	int testcase;
	scanf("%d",&testcase);
	while(testcase--)
	{
				int m,n;
				scanf("%d%d",&m,&n);
				char city1[100],city2[100];
				while(m--)
				{
					scanf("%s%s",&city1,&city2); 
		
					G[city1[0]-'A'].push_back(city2[0]);
					G[city2[0]-'A'].push_back(city1[0]);
				}
				bfs();
				while(n--)
				{
					scanf("%s%s",&city1,&city2);
					find_path(city1[0],city2[0]);
				}
				clearG();
				if(testcase!=0)
				{
					printf("\n");
				}
				
	}
	
	
}