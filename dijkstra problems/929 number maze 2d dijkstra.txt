/*
*************************************************
*                                               *
*                Sowkat ALam                    *
*                                               *
*    Email = sowkat.alam07@gmail.com            *
*                                               *
*                                               *
*************************************************
*/

#include <bits/stdc++.h>
using namespace std;

typedef vector<int>vi;

#define pb push_back
#define pi acos(-1.0)
#define mod 1000000007
#define ll long long int
#define dsort(c) sort(all(c))
#define sci(x) scanf("%d",&x)
#define all(c) c.begin(), c.end()
#define ull unsigned long long int
#define sci2(x,y) scanf("%d%d",&x,&y)
#define dset(x) memset(x,-1,sizeof(x))
#define dclear(x) memset(x,0,sizeof(x))
#define loop(x,a,n) for(int x=a;x<n;x++)
#define read freopen("incb.txt","r",stdin)
#define setinf(x) memset(x,126,sizeof(x))
#define loope(x,a,n) for(int x=a;x<=n;x++)
#define rloope(x,a,n) for(int x=a;x>=n;x--)
#define sci3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define dv(x) cout << #x << ": " <<x << endl
#define write freopen("outcb.txt","w",stdout)
#define dvall(x, r)cout<<"\n";loope(i,0,r)cout<<#x<<"["<<i<<"]: "<<x[i]<<"    ";cout<<"\n";
#define trall(container, it)\
for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)

//pushd, loop , loope , ULL , mp , pb , all , set1 , set0 , abs , setinf , trall , sz
//--------------------------------********************----------------------------------

//--------------------------------********************----------------------------------

#define maxx 1000
int n,row,column,temp;
int mat[maxx+5][maxx+5];

struct type
{
    int uu,vv,cost;

    type(int temp_uu,int temp_vv,int temp_cost)
    {
        uu=temp_uu;
        vv=temp_vv;
        cost=temp_cost;
    }

    bool operator<(type x)const
    {
        return cost>x.cost;
    }
};

bool valid(int i,int j)
{
    if(i>=1&&i<=row&&j>=1&&j<=column)
    {
        return true;
    }
    else return false;
}
int xx[4]={0,0,-1,1};
int yy[4]={1,-1,0,0};

int dijkstra()
{
    priority_queue<type>pq;

    pq.push(type(1,1,mat[1][1]));

    int dist[row+2][column+2];

    loope(i,0,row)
    {
        loope(j,0,column)
        {
            dist[i][j]=100000000;
        }
    }

    dist[1][1]=mat[1][1];

    while(!pq.empty())
    {
        type temptemp=pq.top();
        int u=temptemp.uu;
        int v=temptemp.vv;
        int cost=temptemp.cost;

        if(u==row&&v==column)
        {
            return dist[row][column];
        }
        pq.pop();

        loop(i,0,4)
        {
            if(valid(u+xx[i],v+yy[i]))
            {
                if(dist[u+xx[i]][v+yy[i]]>dist[u][v]+mat[u+xx[i]][v+yy[i]])
                {
                    dist[u+xx[i]][v+yy[i]]=dist[u][v]+mat[u+xx[i]][v+yy[i]];
                    pq.push(type(u+xx[i],v+yy[i],dist[u+xx[i]][v+yy[i]]));
                }
            }
        }
    }
    return dist[row][column];
}
int main()
{
    //read;
    cin>>n;

    loope(t,1,n)
    {
        cin>>row>>column;
        loope(i,1,row)
        {
            loope(j,1,column)
            {
                sci(temp);
                mat[i][j]=temp;
            }
        }

        cout<<dijkstra()<<endl;

    }
}
