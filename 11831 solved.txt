#include<cstdio>
#include<sstream>
#include<cstdlib>
#include<cctype>
#include<cmath>
#include<algorithm>
#include<set>
#include<queue>
#include<stack>
#include<list>
#include<iostream>
#include<fstream>
#include<numeric>
#include<string>
#include<vector>
#include<cstring>
#include<map>
#include<iterator>

using namespace std;

char **G;
int N,M,S;
int RobotIndex[2];
int RobotOrientation[2];

int ans=0;
void operation(char command)
{
	if(command=='D')
	{
		if(RobotIndex[0]==RobotOrientation[0]&&RobotIndex[1]>RobotOrientation[1])
		{
			RobotOrientation[0]=RobotOrientation[0]-1;
			RobotOrientation[1]=RobotOrientation[1]+1;
			return ;
		}
		if(RobotIndex[0]==RobotOrientation[0]&&RobotIndex[1]<RobotOrientation[1])
		{
			RobotOrientation[0]=RobotOrientation[0]+1;
			RobotOrientation[1]=RobotOrientation[1]-1;
			return ;
		}
		if(RobotIndex[0]>RobotOrientation[0]&&RobotIndex[1]==RobotOrientation[1])
		{
			RobotOrientation[0]=RobotOrientation[0]+1;
			RobotOrientation[1]=RobotOrientation[1]+1;
			return ;
		}
		if(RobotIndex[0]<RobotOrientation[0]&&RobotIndex[1]==RobotOrientation[1])
		{
			RobotOrientation[0]=RobotOrientation[0]-1;
			RobotOrientation[1]=RobotOrientation[1]-1;
			return ;
		}
	}

	if(command=='E')
	{
		if(RobotIndex[0]==RobotOrientation[0]&&RobotIndex[1]>RobotOrientation[1])
		{
			RobotOrientation[0]=RobotOrientation[0]+1;
			RobotOrientation[1]=RobotOrientation[1]+1;
			return ;
		}
		if(RobotIndex[0]==RobotOrientation[0]&&RobotIndex[1]<RobotOrientation[1])
		{
			RobotOrientation[0]=RobotOrientation[0]-1;
			RobotOrientation[1]=RobotOrientation[1]-1;
			return ;
		}
		if(RobotIndex[0]>RobotOrientation[0]&&RobotIndex[1]==RobotOrientation[1])
		{
			RobotOrientation[0]=RobotOrientation[0]+1;
			RobotOrientation[1]=RobotOrientation[1]-1;
			return ;
		}
		if(RobotIndex[0]<RobotOrientation[0]&&RobotIndex[1]==RobotOrientation[1])
		{
			RobotOrientation[0]=RobotOrientation[0]-1;
			RobotOrientation[1]=RobotOrientation[1]+1;
			return ;
		}
	}
	if(command=='F')
	{
		if(RobotOrientation[0]>=0&&RobotOrientation[0]<N&&RobotOrientation[1]>=0&&RobotOrientation[1]<M)
		{
			if(G[RobotOrientation[0]][RobotOrientation[1]]!='#')
			{
				if(G[RobotOrientation[0]][RobotOrientation[1]]=='*')
				{
					ans=ans+1;
					G[RobotOrientation[0]][RobotOrientation[1]]='.';
				}
				int abc[2];
				abc[0]=RobotOrientation[0],abc[1]=RobotOrientation[1];

						
				if(RobotIndex[0]==RobotOrientation[0]&&RobotIndex[1]>RobotOrientation[1])
				{
					RobotOrientation[0]=RobotOrientation[0];
					RobotOrientation[1]=RobotOrientation[1]-1;
					RobotIndex[0]=abc[0],RobotIndex[1]=abc[1];
					return ;
				}
				if(RobotIndex[0]==RobotOrientation[0]&&RobotIndex[1]<RobotOrientation[1])
				{
					RobotOrientation[0]=RobotOrientation[0];
					RobotOrientation[1]=RobotOrientation[1]+1;
					RobotIndex[0]=abc[0],RobotIndex[1]=abc[1];
					return ;
				}
				if(RobotIndex[0]>RobotOrientation[0]&&RobotIndex[1]==RobotOrientation[1])
				{
					RobotOrientation[0]=RobotOrientation[0]-1;
					RobotOrientation[1]=RobotOrientation[1];
					RobotIndex[0]=abc[0],RobotIndex[1]=abc[1];
					return ;
				}
				if(RobotIndex[0]<RobotOrientation[0]&&RobotIndex[1]==RobotOrientation[1])
				{
					RobotOrientation[0]=RobotOrientation[0]+1;
					RobotOrientation[1]=RobotOrientation[1];
					RobotIndex[0]=abc[0],RobotIndex[1]=abc[1];
					return ;
				}

				
				return ;
			}
		}
	}
}
int main()
{
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	


	while(scanf("%d%d%d",&N,&M,&S)==3)
	{
				if(N==0&&M==0&&S==0)
				{
					break;
				}

				char ScanVale;

				G=new char*[N];
				for(int i=0;i<N;i++)G[i]=new char[M];

				for(int i=0;i<N;i++)
				{
		
					for(int j=0;j<M;j++)
					{
			
						cin>>ScanVale;

			
			

						if(ScanVale=='N')
						{
							RobotIndex[0]=i,RobotIndex[1]=j;
							RobotOrientation[0]=i-1,RobotOrientation[1]=j;
				
						}
						if(ScanVale=='S')
						{
							RobotIndex[0]=i,RobotIndex[1]=j;
							RobotOrientation[0]=i+1,RobotOrientation[1]=j;
						}
						if(ScanVale=='O')
						{
							RobotIndex[0]=i,RobotIndex[1]=j;
							RobotOrientation[0]=i,RobotOrientation[1]=j-1;
						}
						if(ScanVale=='L')
						{
							RobotIndex[0]=i,RobotIndex[1]=j;
							RobotOrientation[0]=i,RobotOrientation[1]=j+1;
						}
						
						G[i][j]=ScanVale;
					}
				}
				while(S--)
				{
					cin>>ScanVale;
					operation(ScanVale);
					
				}
				cout<<ans<<endl;

				ans=0;
				delete(G);

	}

	
}

/*

West[0]=RobotIndex[0],West[1]=RobotIndex[1]-1;

	South[0]=RobotIndex[0]+1,South[1]=RobotIndex[1];

	North[0]=RobotIndex[0]-1,North[1]=RobotIndex[1];

	East[0]=RobotIndex[0],East[1]=RobotIndex[1]+1;


cout<<endl<<endl;
	for(int i=0;i<N;i++)
	{
		for(int j=0;j<M;j++)
		{
			printf("%c",G[i][j]);
		}	
	}

	*/