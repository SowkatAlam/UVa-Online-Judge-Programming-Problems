/*
*************************************************
*                                               *
*                Sowkat ALam                    *
*                                               *
*    Email = sowkat.alam07@gmail.com            *
*                                               *
*                                               *
*************************************************
*/

#include <bits/stdc++.h>
using namespace std;

typedef vector<int>vi;

#define pb push_back
#define pi acos(-1.0)
#define mod 1000000007
#define ll long long int
#define dsort(c) sort(all(c))
#define sci(x) scanf("%d",&x)
#define all(c) c.begin(), c.end()
#define ull unsigned long long int
#define sci2(x,y) scanf("%d%d",&x,&y)
#define dset(x) memset(x,-1,sizeof(x))
#define dclear(x) memset(x,0,sizeof(x))
#define loop(x,a,n) for(int x=a;x<n;x++)
#define read freopen("incb.txt","r",stdin)
#define setinf(x) memset(x,126,sizeof(x))
#define loope(x,a,n) for(int x=a;x<=n;x++)
#define rloope(x,a,n) for(int x=a;x>=n;x--)
#define sci3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define dv(x) cout << #x << ": " <<x << endl
#define write freopen("outcb.txt","w",stdout)
#define dvall(x, r)cout<<"\n";loope(i,0,r)cout<<#x<<"["<<i<<"]: "<<x[i]<<"    ";cout<<"\n";
#define trall(container, it)\
for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)

//pushd, loop , loope , ULL , mp , pb , all , set1 , set0 , abs , setinf , trall , sz
//--------------------------------********************----------------------------------

//--------------------------------********************----------------------------------

#define maxx 2005
int test_case;
int city,path;

map<string,int>mp;

struct type
{
    int u,v,cost;

    type(int temp_u,int temp_v,int temp_cost) : u(temp_u),v(temp_v),cost(temp_cost){}

    bool operator<(const type& x)const
    {
        return cost<x.cost;
    }
};
vector<type>vvv;

int parent[maxx+5];
int ind;

int find_parent(int node)
{
    if(parent[node]==node)return node;
    else find_parent(parent[node]);
}
int kruskal()
{
    loop(i,0,ind+1)
    {
        parent[i]=i;
    }
    int coun=0,tota_cost=0;
    loop(i,0,vvv.size())
    {
        int uu=find_parent(vvv[i].u);
        int vv=find_parent(vvv[i].v);



        if(uu!=vv)
        {
            parent[vv]=uu;
            tota_cost+=vvv[i].cost;
            if(coun==city-1)
            {
                break;
            }
        }
    }
    return tota_cost;
}
int main()
{
    //read;
    //write;
    cin>>test_case;

    loope(t,1,test_case)
    {
        ind=1;
        int cost_c;
        string node,node1;
        cin>>city>>path;
        loope(i,1,path)
        {
            cin>>node>>node1>>cost_c;
            if(mp[node]==0)
            {
                mp[node]=ind++;
            }
            if(mp[node1]==0)
            {
                mp[node1]=ind++;
            }
            vvv.pb(type(mp[node],mp[node1],cost_c));
        }
        sort(vvv.begin(),vvv.end());
        cout<<kruskal()<<endl;
        if(t<test_case)printf("\n");
        vvv.clear();
        mp.clear();
    }
}
