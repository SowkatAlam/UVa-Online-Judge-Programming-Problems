/*
*************************************************
*                                               *
*                Sowkat ALam                    *
*                                               *
*    Email = sowkat.alam07@gmail.com            *
*                                               *
*                                               *
*************************************************
*/

#include <bits/stdc++.h>
using namespace std;

typedef vector<int>vi;

#define pb push_back
#define pi acos(-1.0)
#define mod 1000000007
#define ll long long int
#define dsort(c) sort(all(c))
#define sci(x) scanf("%d",&x)
#define all(c) c.begin(), c.end()
#define ull unsigned long long int
#define sci2(x,y) scanf("%d%d",&x,&y)
#define dset(x) memset(x,-1,sizeof(x))
#define dclear(x) memset(x,0,sizeof(x))
#define loop(x,a,n) for(int x=a;x<n;x++)
#define read freopen("incb.txt","r",stdin)
#define setinf(x) memset(x,126,sizeof(x))
#define loope(x,a,n) for(int x=a;x<=n;x++)
#define rloope(x,a,n) for(int x=a;x>=n;x--)
#define sci3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define dv(x) cout << #x << ": " <<x << endl
#define write freopen("outcb.txt","w",stdout)
#define dvall(x, r)cout<<"\n";loope(i,0,r)cout<<#x<<"["<<i<<"]: "<<x[i]<<"    ";cout<<"\n";
#define trall(container, it)\
for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)

//pushd, loop , loope , ULL , mp , pb , all , set1 , set0 , abs , setinf , trall , sz
//--------------------------------********************----------------------------------

//--------------------------------********************----------------------------------

int xx[8]={-2,-2,-1,1,2,2,1,-1};
int yy[8]={-1,1,-2,-2,-1,1,2,2};
int chess[8][8];

bool valid(int u,int v)
{
    if(chess[u][v]!=-1)return false;
    if(u<0||u>7||v<0||v>7)return false;
    return true;
}
string tempa,tempb;
void magic_box(int snode1,int snode2,int enode1,int enode2)
{
    dset(chess);
    loop(i,0,8)
    {
        loop(j,0,8)
        {
            chess[i][j]=-1;
        }
    }
    queue<int>q;
    q.push(snode1);
    q.push(snode2);
    chess[snode1][snode2]=0;

    while(!q.empty())
    {
        int u=q.front();
        q.pop();
        int v=q.front();
        q.pop();
        if(enode1==snode1&&snode2==enode2)
                {
                    cout<<"To get from "<<tempa<<" to "<<tempb<<" takes "<<chess[snode1][snode2]<<" knight moves."<<endl;
                    return ;
                }
        loop(i,0,8)
        {
            int nu=u+xx[i];
            int nv=v+yy[i];

            if(valid(u+xx[i],v+yy[i]))
            {
                chess[nu][nv]=chess[u][v]+1;
                if(nu==enode1&&nv==enode2)
                {
                    cout<<"To get from "<<tempa<<" to "<<tempb<<" takes "<<chess[nu][nv]<<" knight moves."<<endl;
                    return ;
                }
                q.push(nu);
                q.push(nv);
            }
        }
    }
}

int main()
{
    //read;


    while(cin>>tempa>>tempb)
    {
        magic_box(tempa[0]-97,tempa[1]-48-1,tempb[0]-97,tempb[1]-48-1);
    }


}





/*
#define maxx 210

vector<string>words;
map<string,int>id;
vector<int>bfs_vector[maxx+5];

bool magic_box_string_compare(string tempa,string tempb)
{
    int diff=0;
    int siza=tempa.size();
    int sizb=tempb.size();
    if(siza!=sizb)return false;
    loop(i,0,siza)
    {
        if(diff>1)return false;
        if(tempa[i]!=tempb[i])diff++;
    }
    if(diff==0)return false;
    return true;
}
void magic_box_bfs()
{
    int len=words.size();
    loop(i,0,len)
    {
        loop(j,i+1,len)
        {
            if(magic_box_string_compare(words[i],words[j]))
            {
                bfs_vector[id[words[i]]].pb(id[words[j]]);

                bfs_vector[id[words[j]]].pb(id[words[i]]);
            }
        }
    }


}
int main()
{
    read;
    string s;
    bool star_found=false;
    int index=0;
    while(cin>>s)
    {
        if(s.compare("*")==0)
        {
            star_found=true;

            magic_box_bfs();
        }
        else
        {
            if(!star_found)
            {
                words.pb(s);
                id[s]=index++;
            }
            else
            {

            }
        }
    }
}
*/
